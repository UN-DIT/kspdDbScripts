import { configDotenv } from 'dotenv';
import { Db } from "mongodb";
import dbInit from "../dbInit"

configDotenv();

const { APP_VERSION } = process.env;
const SCRIPT_NAME = "üïµÔ∏è‚Äç‚ôÄÔ∏è FILESEXTFINDER"
const COLLECTION_NAME = "files";
const LOGS_COLLECTION_NAME = "logs";

async function getMaxDepth(db: Db) {
    try {
        const collection = db.collection(COLLECTION_NAME);

        const maxDepthDoc = await collection
            .find({}, { projection: { depth: 1, _id: 0 } })
            .sort({ depth: -1 })
            .limit(1)
            .toArray();

        if (maxDepthDoc.length > 0) {
            console.log("ü§ø Max depth:", maxDepthDoc[0].depth);
            return maxDepthDoc[0].depth;
        } else {
            console.log("0Ô∏è‚É£ No documents found");
            return null;
        }
    } catch (error) {
        console.error("‚ùå Error fetching max depth:", error);
    }
}

async function updateParentExtensions(db: Db, depth = 0) {
    try {
        const collection = db.collection("files");

        console.log(`üîé Processing depth ${depth}...`);

        // 1. –ó–Ω–∞–π—Ç–∏ –≤—Å—ñ —Ñ–∞–π–ª–∏ —Ç–∞ –ø–∞–ø–∫–∏ –≥–ª–∏–±–∏–Ω–∏ `depth + 1`
        const children = await collection
            .aggregate([
                {
                    $match: { depth: depth + 1 }
                },
                {
                    $group: {
                        _id: "$parentId",
                        fileExts: {
                            $addToSet: { $cond: [{ $eq: ["$type", "file"] }, "$ext", "$$REMOVE"] }
                        },
                        folderExts: {
                            $addToSet: { $cond: [{ $eq: ["$type", "folder"] }, "$filesExt", "$$REMOVE"] }
                        }
                    }
                },
                {
                    $project: {
                        _id: 1,
                        filesExt: { $setUnion: ["$fileExts", { $reduce: { input: "$folderExts", initialValue: [], in: { $setUnion: ["$$value", "$$this"] } } }] }
                    }
                }
            ])
            .toArray();

        if (children.length === 0) {
            console.log("‚úÖ No updates needed.");
            return;
        }

        console.log(`üìÇ Updating ${children.length} parent folders with extensions...`);

        // 2. –ú–∞—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏—Ö –ø–∞–ø–æ–∫
        const bulkOps = children.map((doc) => ({
            updateOne: {
                filter: { id: doc._id },
                update: { $set: { filesExt: doc.filesExt } }
            }
        }));

        if (bulkOps.length > 0) {
            await collection.bulkWrite(bulkOps);
            console.log(`‚úÖ Updated ${bulkOps.length} folders.`);
        }
    } catch (error) {
        console.error("‚ùå Error:", error);
    }
}

const main = async () => {
    console.log(`${SCRIPT_NAME} v.${APP_VERSION}`)

    const startTime = Date.now(); // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —á–∞—Å
    const [connect, disconnect] = await dbInit()
    let status = "success"

    try {
        const db = await connect();

        if (!db) {
            return
        }

        //await setExtension(db);

        let maxDepth = await getMaxDepth(db);

        for (let depth = maxDepth; depth >= 0; depth--) {
            console.log('ü§ø Depth: ', depth)
            await updateParentExtensions(db, depth);
        }

    } catch (error) {
        status = "error";
        console.error("‚ùå Error:", error);
    }

    const endTime = Date.now(); // –ß–∞—Å –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó
    const durationMs = endTime - startTime; // –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å —É –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö

    try {
        const db = await connect();

        if (!db) {
            return
        }

        const logsCollection = db.collection(LOGS_COLLECTION_NAME);
        await logsCollection.insertOne({
            type: "filesExtFinder",
            text: "–ü–æ—à—É–∫ —Ä–æ–∑—à–∏—Ä–µ–Ω—å —Ñ–∞–π–ª—ñ–≤",
            startTime: new Date(startTime).toISOString(),
            endTime: new Date(endTime).toISOString(),
            status
        });
    } catch (error) {
        console.error("‚ùå Error:", error);
    } finally {
        await disconnect()
        console.log("üîå Disconnected from MongoDB");
    }

    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≥–æ–¥–∏–Ω, —Ö–≤–∏–ª–∏–Ω, —Å–µ–∫—É–Ω–¥
    const hours = Math.floor(durationMs / 3600000);
    const minutes = Math.floor((durationMs % 3600000) / 60000);
    const seconds = Math.floor((durationMs % 60000) / 1000);

    console.log(`‚è≥ Execution time: ${hours}h ${minutes}m ${seconds}s`);
}

// Run the script
main()