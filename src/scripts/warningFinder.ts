import { configDotenv } from 'dotenv';
import { Db } from "mongodb";
import dbInit from "../dbInit";
import {sendMessageToTeams} from "./teamsSender";


configDotenv();

const { APP_VERSION } = process.env;
const SCRIPT_NAME = "‚ö†Ô∏è WARNINGFINDER"
const COLLECTION_NAME = "files";
const LOGS_COLLECTION_NAME = "logs";

async function setExtension(db: Db) {
    try {
        const collection = db.collection(COLLECTION_NAME);

        console.log(`üóÇÔ∏è Set files extension`);
        const result = await collection.updateMany(
            { path: { $exists: true }, type: "file" },
            [
                {
                    $set: {
                        ext: {
                            $toLower: {
                                $arrayElemAt: [{ $split: ["$path", "."] }, -1]
                            }
                        }
                    }
                },
                {
                    $set: {
                        ext: {
                            $cond: {
                                if: { $lte: [{ $strLenCP: "$ext" }, 10] }, // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–≤–∂–∏–Ω—É ext
                                then: "$ext",
                                else: "$$REMOVE" // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ª–µ, —è–∫—â–æ –¥–æ–≤–∂–∏–Ω–∞ –±—ñ–ª—å—à–µ 10
                            }
                        }
                    }
                }
            ]
        );
        console.log(`‚úÖ Updated ${result.modifiedCount} documents.`);
    } catch (error) {
        console.error("‚ùå Error setting files extension:", error);
    }
}

async function markWarningByExt(db: Db) {
    try {
        const collection = db.collection(COLLECTION_NAME);

        console.log(`üìù Mark possibly warning files by extension (lnk, crdownload)`);
        const result = await collection.updateMany(
            { ext: { $in: ["lnk", "crdownload"] } },
            { $set: { isWarning: true } }
        );
        console.log(`‚úÖ Updated ${result.modifiedCount} documents.`);
    } catch (error) {
        console.error("‚ùå Error marking possibly warning fields:", error);
    }
}

async function markWarningByFileName(db: Db) {
    try {
        const collection = db.collection(COLLECTION_NAME);

        console.log(`üìù Mark possibly warning files by filename (thumbs.db)`);
        const result = await collection.updateMany(
            { name: { $regex: /^thumbs\.db$/i } }, // –†–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è –Ω–µ—á—É—Ç–ª–∏–≤–æ–≥–æ –¥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É –ø–æ—à—É–∫—É
            { $set: { isWarning: true } }
        );
        console.log(`‚úÖ Updated ${result.modifiedCount} documents.`);
    } catch (error) {
        console.error("‚ùå Error marking possibly warning fields:", error);
    }
}

const main = async () => {
    console.log(`${SCRIPT_NAME} v.${APP_VERSION}`)

    const startTime = Date.now(); // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —á–∞—Å
    const [connect, disconnect] = await dbInit()
    let status = "success"

    try {
        const db = await connect();

        if (!db) {
            return
        }

        await setExtension(db);
        await markWarningByExt(db);
        await markWarningByFileName(db);
    } catch (error) {
        status = "error";
        console.error("‚ùå Error:", error);
    }

    const endTime = Date.now(); // –ß–∞—Å –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó
    const durationMs = endTime - startTime; // –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å —É –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö

    try {
        const db = await connect();

        if (!db) {
            return
        }

        const logsCollection = db.collection(LOGS_COLLECTION_NAME);
        await logsCollection.insertOne({
            type: "warningFinder",
            text: "–ü–æ—à—É–∫ —Å–º—ñ—Ç—Ç—è",
            startTime: new Date(startTime).toISOString(),
            endTime: new Date(endTime).toISOString(),
            status
        });
        await sendMessageToTeams(`–ü–æ—à—É–∫ —Å–º—ñ—Ç—Ç—è - ${status}`);
    } catch (error) {
        console.error("‚ùå Error:", error);
    } finally {
        await disconnect()
        console.log("üîå Disconnected from MongoDB");
    }

    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≥–æ–¥–∏–Ω, —Ö–≤–∏–ª–∏–Ω, —Å–µ–∫—É–Ω–¥
    const hours = Math.floor(durationMs / 3600000);
    const minutes = Math.floor((durationMs % 3600000) / 60000);
    const seconds = Math.floor((durationMs % 60000) / 1000);

    console.log(`‚è≥ Execution time: ${hours}h ${minutes}m ${seconds}s`);
}

// Run the script
main()