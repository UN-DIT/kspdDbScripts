import { configDotenv } from 'dotenv';
import { Db } from "mongodb";
import dbInit from "../dbInit";


configDotenv();

const { APP_VERSION } = process.env;
const SCRIPT_NAME = "‚õ©Ô∏è STRUCTUREMATCHER"
const STRUCTURE_COLLECTION_NAME = "data_structure";
const FILES_COLLECTION_NAME = "files";
const LOGS_COLLECTION_NAME = "logs";

async function getSubjects(db: Db) {
    try {
        const collection = db.collection(STRUCTURE_COLLECTION_NAME);
        const result = await collection.find({ fileMask: { $ne: "" } }).toArray();

        console.log(`üëÄ found ${result.length} not empty subjects.`);

        return result;
    } catch (error) {
        console.error("‚ùå Error finding subjects:", error);
    }
}

const main = async () => {
    console.log(`${SCRIPT_NAME} v.${APP_VERSION}`)

    const startTime = Date.now(); // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —á–∞—Å
    const [connect, disconnect] = await dbInit()
    let status = "success"

    try {
        const db = await connect();

        if (!db) {
            return
        }

        const collection = db.collection(FILES_COLLECTION_NAME);
        const subjects = await getSubjects(db) || [];

        for (const subject of subjects) {
            console.log(`üóº Searching for ${subject.path}...`)

            const result = await collection.updateMany(
                { path: { $regex: subject.fileMask, $options: "i" } },
                { $push: { subjects: subject.id } }
            );

            console.log(`‚úÖ Updated ${result.modifiedCount} documents`);
        }
    } catch (error) {
        status = "error";
        console.error("‚ùå Error:", error);
    }

    const endTime = Date.now(); // –ß–∞—Å –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó
    const durationMs = endTime - startTime; // –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å —É –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö

    try {
        const db = await connect();

        if (!db) {
            return
        }

        const logsCollection = db.collection(LOGS_COLLECTION_NAME);
        await logsCollection.insertOne({
            type: "subjectMatcher",
            text: "–ú–∞—Ä–∫—É–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π",
            startTime: new Date(startTime).toISOString(),
            endTime: new Date(endTime).toISOString(),
            status
        });
    } catch (error) {
        console.error("‚ùå Error:", error);
    } finally {
        await disconnect()
        console.log("üîå Disconnected from MongoDB");
    }

    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≥–æ–¥–∏–Ω, —Ö–≤–∏–ª–∏–Ω, —Å–µ–∫—É–Ω–¥
    const hours = Math.floor(durationMs / 3600000);
    const minutes = Math.floor((durationMs % 3600000) / 60000);
    const seconds = Math.floor((durationMs % 60000) / 1000);

    console.log(`‚è≥ Execution time: ${hours}h ${minutes}m ${seconds}s`);
}

// Run the script
main()